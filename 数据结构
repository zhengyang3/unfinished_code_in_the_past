数据结构    算法

realloc （扩容，在原来 申请的基础之上进行扩容，）
	使用注意事项：
		先判断前的指针是否有足够的连续空间可用，如果有就会按照 你的写的内容 在后面扩容，如果空间不够，会按照指定 的大小分配空间然后将原来 的内存人头到尾拷贝到新的内存区域里面，同时返回新的地址
		如果说重新分配成功则返回指针，否则返回空指针！
		
		
1 232445657687980923－09＝5465＝432＆657568789＊234（）190＋789978％348＆8980＆Y879089＆908－787＊343487



链式的存储结构 
 	链表
 	链表它是由一个元素一个元素串联起来的！
 	链表元素的定义
 		里面可以放一外或多个同类型或者不同类型的变量
 		一个指向下一个节点的指针
 		struct Node
 		{
 			int data;
 			struct Node* next;	
 		};
 		struct Node a={1,NULL};
 		给指针初始化为NULL或者直接等于0效果是一样的；

指针操作的两种方式：
	struct stu
	{
		char name[10];
		
		int age;
		
		double score;
	
	};
	struct stu a = {"name1",13,99.9};
	
	struct stu* p = NULL;
	
	p = &a;
	
	a.name 的两种指针操作方式： 

 1	(*p).name
	
 2	p->name    p->age	
	
	

struct xxx    表示定义的是一个新的类型，就像int型一样；

//next里面保存的是下一个节点整个的两个部分的地址(地址变量保存的全部都是首地址而已，变量的类型决定变量占用内存的大小)，包括date和next!,但是你不能对这个地址分两部分去操作，你必须把地址加 * 后，让它变成了它里面的内容，这个时候就可以分两部分支操作！

只要出现了地址，最好一切的操作都在地址层面上去进行！


定义一个函数的时候有没有返回值的区别：
		有返回值，则这个返回值，可以在这个函数之外运用，比如，返回一个sum，则这个
				  sum可以在下面直接去运用，
		没有返回值，这个函数的主要作用全部在该函数内部完成，不能对函数外部起作用
				  但是如果是对地址操作，那么它所有的操作对会对函数外部起作用！


增加新节点的两种方式；
 1.	Node* ptr＝NULL;
 		ptr=(Node*)malloc(sizof(Node));
		必须释放：
		void clear(Node* head)
		{
			Node* p=NULL;			
			while(head!=NULL)
			{
				p=head->next;
				free(head);
				head=p;						
			}		
		}
 
 
 2.      Node a1={1,NULL};
         Node a2={2,NULL};
         Node a3={3,NULL};
         Node a4={4,NULL};
         a1.next=&a2;
         a2.next=&a3;

	
家庭作业 
	将链表逆序的程序 （递归的方式的死循环的问题解决）
	将正常的链表模块全部记下来！
	把单向链表所有功能都改写成双向链表！
 		
 		
 		
双向链表
	 		
 		
数组与链表的区别：
	数组申请的内存空间是连续的，而链表申请的可能是不连续的！（从内存分
	配的角度去理解二者的差异！要理解数组与其它变量＜如Int型＞也可以从
	这个角度去理解！）
	


 		
栈－－是一种特殊的表
	  表头：栈顶
	  表尾：栈底
	  特性：它只能允许在栈顶添加数据
	  		数据先进后出
	  功能：1：判断栈是否为空（要求栈为空就进栈，栈不为空就出栈，出栈
	  			的时候打印出栈的元素！）
	  		2：判断栈是否为满
	  		3: 进栈（压栈）
	  		4：出栈
	  				
队列－－也是一个线性表
		特点：数据先进先出！
 				
栈和队列都可以用数组和链表来实现！
 		
 
 
 		
 函数的传值调用		
 
 
 
 
  树－－也是一种存储结构；
  	树的遍历：三种方式 
  		1：前序遍历：先访问根节点，然后再遍历左子树，接着遍历右子树
  		2：中序遍历：先访问左子树，再是根，最后是右子树
  		3：后序遍历：左 右 根	
 		｀
 		
 		
 		
 		
 		
 		
 		
 		
 		
 		
